// Code generated by go-swagger; DO NOT EDIT.

package repository

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery --name API --keeptree --with-expecter --case underscore

// API is the interface of the repository client
type API interface {
	/*
	   DeleteRepository deletes repository

	   Delete the repository specified by name*/
	DeleteRepository(ctx context.Context, params *DeleteRepositoryParams) (*DeleteRepositoryOK, error)
	/*
	   GetRepository gets repository

	   Get the repository specified by name*/
	GetRepository(ctx context.Context, params *GetRepositoryParams) (*GetRepositoryOK, error)
	/*
	   ListAllRepositories lists all authorized repositories

	   List all authorized repositories*/
	ListAllRepositories(ctx context.Context, params *ListAllRepositoriesParams) (*ListAllRepositoriesOK, error)
	/*
	   ListRepositories lists repositories

	   List repositories of the specified project*/
	ListRepositories(ctx context.Context, params *ListRepositoriesParams) (*ListRepositoriesOK, error)
	/*
	   UpdateRepository updates repository

	   Update the repository specified by name*/
	UpdateRepository(ctx context.Context, params *UpdateRepositoryParams) (*UpdateRepositoryOK, error)
}

// New creates a new repository API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for repository API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
DeleteRepository deletes repository

Delete the repository specified by name
*/
func (a *Client) DeleteRepository(ctx context.Context, params *DeleteRepositoryParams) (*DeleteRepositoryOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRepository",
		Method:             "DELETE",
		PathPattern:        "/projects/{project_name}/repositories/{repository_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteRepositoryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	switch value := result.(type) {
	case *DeleteRepositoryOK:
		return value, nil
	case *DeleteRepositoryBadRequest:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *DeleteRepositoryUnauthorized:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *DeleteRepositoryForbidden:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *DeleteRepositoryNotFound:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *DeleteRepositoryInternalServerError:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteRepository: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepository gets repository

Get the repository specified by name
*/
func (a *Client) GetRepository(ctx context.Context, params *GetRepositoryParams) (*GetRepositoryOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRepository",
		Method:             "GET",
		PathPattern:        "/projects/{project_name}/repositories/{repository_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetRepositoryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	switch value := result.(type) {
	case *GetRepositoryOK:
		return value, nil
	case *GetRepositoryBadRequest:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *GetRepositoryUnauthorized:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *GetRepositoryForbidden:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *GetRepositoryNotFound:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *GetRepositoryInternalServerError:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepository: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListAllRepositories lists all authorized repositories

List all authorized repositories
*/
func (a *Client) ListAllRepositories(ctx context.Context, params *ListAllRepositoriesParams) (*ListAllRepositoriesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAllRepositories",
		Method:             "GET",
		PathPattern:        "/repositories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListAllRepositoriesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	switch value := result.(type) {
	case *ListAllRepositoriesOK:
		return value, nil
	case *ListAllRepositoriesBadRequest:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *ListAllRepositoriesInternalServerError:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAllRepositories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListRepositories lists repositories

List repositories of the specified project
*/
func (a *Client) ListRepositories(ctx context.Context, params *ListRepositoriesParams) (*ListRepositoriesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listRepositories",
		Method:             "GET",
		PathPattern:        "/projects/{project_name}/repositories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListRepositoriesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	switch value := result.(type) {
	case *ListRepositoriesOK:
		return value, nil
	case *ListRepositoriesBadRequest:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *ListRepositoriesUnauthorized:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *ListRepositoriesForbidden:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *ListRepositoriesNotFound:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *ListRepositoriesInternalServerError:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listRepositories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateRepository updates repository

Update the repository specified by name
*/
func (a *Client) UpdateRepository(ctx context.Context, params *UpdateRepositoryParams) (*UpdateRepositoryOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateRepository",
		Method:             "PUT",
		PathPattern:        "/projects/{project_name}/repositories/{repository_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateRepositoryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	switch value := result.(type) {
	case *UpdateRepositoryOK:
		return value, nil
	case *UpdateRepositoryBadRequest:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *UpdateRepositoryUnauthorized:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *UpdateRepositoryForbidden:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *UpdateRepositoryNotFound:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *UpdateRepositoryInternalServerError:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRepository: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}
