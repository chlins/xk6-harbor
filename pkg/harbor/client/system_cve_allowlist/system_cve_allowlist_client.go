// Code generated by go-swagger; DO NOT EDIT.

package system_cve_allowlist

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery --name API --keeptree --with-expecter --case underscore

// API is the interface of the system cve allowlist client
type API interface {
	/*
	   GetSystemCVEAllowlist gets the system level allowlist of CVE

	   Get the system level allowlist of CVE.  This API can be called by all authenticated users.*/
	GetSystemCVEAllowlist(ctx context.Context, params *GetSystemCVEAllowlistParams) (*GetSystemCVEAllowlistOK, error)
	/*
	   PutSystemCVEAllowlist updates the system level allowlist of CVE

	   This API overwrites the system level allowlist of CVE with the list in request body.  Only system Admin has permission to call this API.*/
	PutSystemCVEAllowlist(ctx context.Context, params *PutSystemCVEAllowlistParams) (*PutSystemCVEAllowlistOK, error)
}

// New creates a new system cve allowlist API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for system cve allowlist API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
GetSystemCVEAllowlist gets the system level allowlist of CVE

Get the system level allowlist of CVE.  This API can be called by all authenticated users.
*/
func (a *Client) GetSystemCVEAllowlist(ctx context.Context, params *GetSystemCVEAllowlistParams) (*GetSystemCVEAllowlistOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSystemCVEAllowlist",
		Method:             "GET",
		PathPattern:        "/system/CVEAllowlist",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSystemCVEAllowlistReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	switch value := result.(type) {
	case *GetSystemCVEAllowlistOK:
		return value, nil
	case *GetSystemCVEAllowlistUnauthorized:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *GetSystemCVEAllowlistInternalServerError:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSystemCVEAllowlist: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutSystemCVEAllowlist updates the system level allowlist of CVE

This API overwrites the system level allowlist of CVE with the list in request body.  Only system Admin has permission to call this API.
*/
func (a *Client) PutSystemCVEAllowlist(ctx context.Context, params *PutSystemCVEAllowlistParams) (*PutSystemCVEAllowlistOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putSystemCVEAllowlist",
		Method:             "PUT",
		PathPattern:        "/system/CVEAllowlist",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutSystemCVEAllowlistReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	switch value := result.(type) {
	case *PutSystemCVEAllowlistOK:
		return value, nil
	case *PutSystemCVEAllowlistUnauthorized:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *PutSystemCVEAllowlistForbidden:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *PutSystemCVEAllowlistInternalServerError:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putSystemCVEAllowlist: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}
