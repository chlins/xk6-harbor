// Code generated by go-swagger; DO NOT EDIT.

package robot

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery --name API --keeptree --with-expecter --case underscore

// API is the interface of the robot client
type API interface {
	/*
	   CreateRobot creates a robot account

	   Create a robot account*/
	CreateRobot(ctx context.Context, params *CreateRobotParams) (*CreateRobotCreated, error)
	/*
	   DeleteRobot deletes a robot account

	   This endpoint deletes specific robot account information by robot ID.*/
	DeleteRobot(ctx context.Context, params *DeleteRobotParams) (*DeleteRobotOK, error)
	/*
	   GetRobotByID gets a robot account

	   This endpoint returns specific robot account information by robot ID.*/
	GetRobotByID(ctx context.Context, params *GetRobotByIDParams) (*GetRobotByIDOK, error)
	/*
	   ListRobot gets robot account

	   List the robot accounts with the specified level and project.*/
	ListRobot(ctx context.Context, params *ListRobotParams) (*ListRobotOK, error)
	/*
	   RefreshSec refreshes the robot secret

	   Refresh the robot secret*/
	RefreshSec(ctx context.Context, params *RefreshSecParams) (*RefreshSecOK, error)
	/*
	   UpdateRobot updates a robot account

	   This endpoint updates specific robot account information by robot ID.*/
	UpdateRobot(ctx context.Context, params *UpdateRobotParams) (*UpdateRobotOK, error)
}

// New creates a new robot API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for robot API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
CreateRobot creates a robot account

Create a robot account
*/
func (a *Client) CreateRobot(ctx context.Context, params *CreateRobotParams) (*CreateRobotCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateRobot",
		Method:             "POST",
		PathPattern:        "/robots",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateRobotReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	switch value := result.(type) {
	case *CreateRobotCreated:
		return value, nil
	case *CreateRobotBadRequest:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *CreateRobotUnauthorized:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *CreateRobotForbidden:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *CreateRobotNotFound:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *CreateRobotInternalServerError:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateRobot: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteRobot deletes a robot account

This endpoint deletes specific robot account information by robot ID.
*/
func (a *Client) DeleteRobot(ctx context.Context, params *DeleteRobotParams) (*DeleteRobotOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteRobot",
		Method:             "DELETE",
		PathPattern:        "/robots/{robot_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteRobotReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	switch value := result.(type) {
	case *DeleteRobotOK:
		return value, nil
	case *DeleteRobotBadRequest:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *DeleteRobotUnauthorized:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *DeleteRobotForbidden:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *DeleteRobotNotFound:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *DeleteRobotInternalServerError:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteRobot: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRobotByID gets a robot account

This endpoint returns specific robot account information by robot ID.
*/
func (a *Client) GetRobotByID(ctx context.Context, params *GetRobotByIDParams) (*GetRobotByIDOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRobotByID",
		Method:             "GET",
		PathPattern:        "/robots/{robot_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetRobotByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	switch value := result.(type) {
	case *GetRobotByIDOK:
		return value, nil
	case *GetRobotByIDUnauthorized:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *GetRobotByIDForbidden:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *GetRobotByIDNotFound:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *GetRobotByIDInternalServerError:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRobotByID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListRobot gets robot account

List the robot accounts with the specified level and project.
*/
func (a *Client) ListRobot(ctx context.Context, params *ListRobotParams) (*ListRobotOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListRobot",
		Method:             "GET",
		PathPattern:        "/robots",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListRobotReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	switch value := result.(type) {
	case *ListRobotOK:
		return value, nil
	case *ListRobotBadRequest:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *ListRobotNotFound:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *ListRobotInternalServerError:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListRobot: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RefreshSec refreshes the robot secret

Refresh the robot secret
*/
func (a *Client) RefreshSec(ctx context.Context, params *RefreshSecParams) (*RefreshSecOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RefreshSec",
		Method:             "PATCH",
		PathPattern:        "/robots/{robot_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RefreshSecReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	switch value := result.(type) {
	case *RefreshSecOK:
		return value, nil
	case *RefreshSecBadRequest:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *RefreshSecUnauthorized:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *RefreshSecForbidden:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *RefreshSecNotFound:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *RefreshSecInternalServerError:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RefreshSec: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateRobot updates a robot account

This endpoint updates specific robot account information by robot ID.
*/
func (a *Client) UpdateRobot(ctx context.Context, params *UpdateRobotParams) (*UpdateRobotOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateRobot",
		Method:             "PUT",
		PathPattern:        "/robots/{robot_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateRobotReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	switch value := result.(type) {
	case *UpdateRobotOK:
		return value, nil
	case *UpdateRobotBadRequest:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *UpdateRobotUnauthorized:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *UpdateRobotForbidden:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *UpdateRobotNotFound:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *UpdateRobotConflict:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *UpdateRobotInternalServerError:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateRobot: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}
