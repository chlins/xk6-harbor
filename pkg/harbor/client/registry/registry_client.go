// Code generated by go-swagger; DO NOT EDIT.

package registry

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery --name API --keeptree --with-expecter --case underscore

// API is the interface of the registry client
type API interface {
	/*
	   CreateRegistry creates a registry

	   Create a registry*/
	CreateRegistry(ctx context.Context, params *CreateRegistryParams) (*CreateRegistryCreated, error)
	/*
	   DeleteRegistry deletes the specific registry

	   Delete the specific registry*/
	DeleteRegistry(ctx context.Context, params *DeleteRegistryParams) (*DeleteRegistryOK, error)
	/*
	   GetRegistry gets the specific registry

	   Get the specific registry*/
	GetRegistry(ctx context.Context, params *GetRegistryParams) (*GetRegistryOK, error)
	/*
	   GetRegistryInfo gets the registry info

	   Get the registry info*/
	GetRegistryInfo(ctx context.Context, params *GetRegistryInfoParams) (*GetRegistryInfoOK, error)
	/*
	   ListRegistries lists the registries

	   List the registries*/
	ListRegistries(ctx context.Context, params *ListRegistriesParams) (*ListRegistriesOK, error)
	/*
	   ListRegistryProviderInfos lists all registered registry provider information

	   List all registered registry provider information*/
	ListRegistryProviderInfos(ctx context.Context, params *ListRegistryProviderInfosParams) (*ListRegistryProviderInfosOK, error)
	/*
	   ListRegistryProviderTypes lists registry adapters

	   List registry adapters*/
	ListRegistryProviderTypes(ctx context.Context, params *ListRegistryProviderTypesParams) (*ListRegistryProviderTypesOK, error)
	/*
	   PingRegistry checks status of a registry

	   Check status of a registry*/
	PingRegistry(ctx context.Context, params *PingRegistryParams) (*PingRegistryOK, error)
	/*
	   UpdateRegistry updates the registry

	   Update the registry*/
	UpdateRegistry(ctx context.Context, params *UpdateRegistryParams) (*UpdateRegistryOK, error)
}

// New creates a new registry API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for registry API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
CreateRegistry creates a registry

Create a registry
*/
func (a *Client) CreateRegistry(ctx context.Context, params *CreateRegistryParams) (*CreateRegistryCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createRegistry",
		Method:             "POST",
		PathPattern:        "/registries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateRegistryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	switch value := result.(type) {
	case *CreateRegistryCreated:
		return value, nil
	case *CreateRegistryBadRequest:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *CreateRegistryUnauthorized:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *CreateRegistryForbidden:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *CreateRegistryConflict:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *CreateRegistryInternalServerError:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRegistry: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteRegistry deletes the specific registry

Delete the specific registry
*/
func (a *Client) DeleteRegistry(ctx context.Context, params *DeleteRegistryParams) (*DeleteRegistryOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRegistry",
		Method:             "DELETE",
		PathPattern:        "/registries/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteRegistryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	switch value := result.(type) {
	case *DeleteRegistryOK:
		return value, nil
	case *DeleteRegistryUnauthorized:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *DeleteRegistryForbidden:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *DeleteRegistryNotFound:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *DeleteRegistryPreconditionFailed:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *DeleteRegistryInternalServerError:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteRegistry: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRegistry gets the specific registry

Get the specific registry
*/
func (a *Client) GetRegistry(ctx context.Context, params *GetRegistryParams) (*GetRegistryOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRegistry",
		Method:             "GET",
		PathPattern:        "/registries/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetRegistryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	switch value := result.(type) {
	case *GetRegistryOK:
		return value, nil
	case *GetRegistryUnauthorized:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *GetRegistryForbidden:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *GetRegistryNotFound:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *GetRegistryInternalServerError:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRegistry: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRegistryInfo gets the registry info

Get the registry info
*/
func (a *Client) GetRegistryInfo(ctx context.Context, params *GetRegistryInfoParams) (*GetRegistryInfoOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRegistryInfo",
		Method:             "GET",
		PathPattern:        "/registries/{id}/info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetRegistryInfoReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	switch value := result.(type) {
	case *GetRegistryInfoOK:
		return value, nil
	case *GetRegistryInfoUnauthorized:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *GetRegistryInfoForbidden:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *GetRegistryInfoNotFound:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *GetRegistryInfoInternalServerError:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRegistryInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListRegistries lists the registries

List the registries
*/
func (a *Client) ListRegistries(ctx context.Context, params *ListRegistriesParams) (*ListRegistriesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listRegistries",
		Method:             "GET",
		PathPattern:        "/registries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListRegistriesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	switch value := result.(type) {
	case *ListRegistriesOK:
		return value, nil
	case *ListRegistriesUnauthorized:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *ListRegistriesForbidden:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *ListRegistriesInternalServerError:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listRegistries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListRegistryProviderInfos lists all registered registry provider information

List all registered registry provider information
*/
func (a *Client) ListRegistryProviderInfos(ctx context.Context, params *ListRegistryProviderInfosParams) (*ListRegistryProviderInfosOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listRegistryProviderInfos",
		Method:             "GET",
		PathPattern:        "/replication/adapterinfos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListRegistryProviderInfosReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	switch value := result.(type) {
	case *ListRegistryProviderInfosOK:
		return value, nil
	case *ListRegistryProviderInfosUnauthorized:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *ListRegistryProviderInfosForbidden:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *ListRegistryProviderInfosInternalServerError:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listRegistryProviderInfos: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListRegistryProviderTypes lists registry adapters

List registry adapters
*/
func (a *Client) ListRegistryProviderTypes(ctx context.Context, params *ListRegistryProviderTypesParams) (*ListRegistryProviderTypesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listRegistryProviderTypes",
		Method:             "GET",
		PathPattern:        "/replication/adapters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListRegistryProviderTypesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	switch value := result.(type) {
	case *ListRegistryProviderTypesOK:
		return value, nil
	case *ListRegistryProviderTypesUnauthorized:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *ListRegistryProviderTypesForbidden:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *ListRegistryProviderTypesInternalServerError:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listRegistryProviderTypes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PingRegistry checks status of a registry

Check status of a registry
*/
func (a *Client) PingRegistry(ctx context.Context, params *PingRegistryParams) (*PingRegistryOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "pingRegistry",
		Method:             "POST",
		PathPattern:        "/registries/ping",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PingRegistryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	switch value := result.(type) {
	case *PingRegistryOK:
		return value, nil
	case *PingRegistryBadRequest:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *PingRegistryUnauthorized:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *PingRegistryForbidden:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *PingRegistryNotFound:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *PingRegistryInternalServerError:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for pingRegistry: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateRegistry updates the registry

Update the registry
*/
func (a *Client) UpdateRegistry(ctx context.Context, params *UpdateRegistryParams) (*UpdateRegistryOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateRegistry",
		Method:             "PUT",
		PathPattern:        "/registries/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateRegistryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	switch value := result.(type) {
	case *UpdateRegistryOK:
		return value, nil
	case *UpdateRegistryUnauthorized:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *UpdateRegistryForbidden:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *UpdateRegistryNotFound:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *UpdateRegistryConflict:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *UpdateRegistryInternalServerError:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRegistry: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}
